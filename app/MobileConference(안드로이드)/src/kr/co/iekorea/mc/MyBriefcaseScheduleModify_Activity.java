package kr.co.iekorea.mc;import java.util.ArrayList;import java.util.Calendar;import kr.co.iekorea.mc.datetime.DateTimePicker;import kr.co.iekorea.mc.staticdata.StaticData;import kr.co.iekorea.mc.util.BaseInterface;import kr.co.iekorea.mc.util.ProcessManager;import kr.co.iekorea.mc.util.WeakAsyncTask;import kr.co.iekorea.mc.xml.InputUserDto;import kr.co.iekorea.mc.xml.MybriefDAO;import kr.co.iekorea.mc.xml.ScheduleContentsDto;import android.app.Activity;import android.app.Dialog;import android.app.TimePickerDialog;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.view.Window;import android.widget.Button;import android.widget.EditText;import android.widget.ImageButton;import android.widget.LinearLayout;import android.widget.LinearLayout.LayoutParams;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.TimePicker;import android.widget.Toast;public class MyBriefcaseScheduleModify_Activity extends Activity implements		BaseInterface {	// Activity control.	private ProcessManager processManager;	// layout area	private ImageButton btn_back;	private LinearLayout layout_header;	private LinearLayout layout_progressbar;		// detail layout resource	private EditText edit_title;						private EditText edit_contents;					private TextView text_start_time;				private TextView text_start_date;				private ImageButton  btn_start_time_add;	private TextView text_end_time;				private ImageButton  btn_end_time_add;	private ImageButton btn_check;	public String to_user_cd="";	public String date=""; 	public String start_hour="";	public String end_hour="";		public ArrayList<InputUserDto> userDtoList;	// intent	private int schedule_id;	// items	private ScheduleContentsDto dto = new ScheduleContentsDto();		// 언어	private TextView total_title,text_wait;		@Override	protected void onCreate(Bundle savedInstanceState) {		// TODO Auto-generated method stub		super.onCreate(savedInstanceState);		this.initView();		if (StaticData.logined) {			this.getXmlResources();			this.modifyXmlResources();						this.getIntentValues();			this.setTimePickerData();			new setScheduleInfo(MyBriefcaseScheduleModify_Activity.this).execute();		} else {			switch (StaticData.NOWLANGUAGE) {			case StaticData.KOREA:			Toast.makeText(getApplicationContext(),			R.string.please_retry_ko, Toast.LENGTH_SHORT).show();			break;			case StaticData.ENGLISH:			Toast.makeText(getApplicationContext(),			R.string.please_retry_en, Toast.LENGTH_SHORT).show();			break;			case StaticData.CHINA:			Toast.makeText(getApplicationContext(),			R.string.please_retry_cn, Toast.LENGTH_SHORT).show();			break;			}			Intent intent = new Intent(getApplicationContext(),Login_Activity.class);			startActivity(intent);			overridePendingTransition(android.R.anim.fade_in,android.R.anim.fade_out);			finish();		}	}		public void getIntentValues(){		this.schedule_id = getIntent().getIntExtra("schedule_id", 0);	}			public void setTimePickerData(){		final Calendar cS = Calendar.getInstance();	    eHour = cS.get(Calendar.HOUR_OF_DAY);	    eMin = cS.get(Calendar.MINUTE);	}		@Override	protected void onDestroy() {		super.onDestroy();		this.processManager.deleteActivity(this);	}		@Override	public void onBackPressed() {		Intent intent = new Intent(getApplicationContext(), MyBriefcaseScheduleDetail_Activity.class);		intent.putExtra("schedule_id", schedule_id);		startActivity(intent);		finish();	}		@Override	public void finish() {		super.finish();		overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);	}	@Override	public void initView() {		this.setContentView(R.layout.activity_mybriefcase_schedule_add);		this.processManager = ProcessManager.getInstance();		this.processManager.addActivity(this);		this.userDtoList = new ArrayList<InputUserDto>();	}	@Override	public void getXmlResources() {		this.btn_back = (ImageButton) this.findViewById(R.id.btn_back);		this.layout_header = (LinearLayout) this.findViewById(R.id.layout_header);		this.layout_progressbar = (LinearLayout) this.findViewById(R.id.layout_progressbar);				this.edit_title = (EditText) this.findViewById(R.id.edit_title);		this.edit_contents = (EditText) this.findViewById(R.id.edit_contents);		this.text_start_time = (TextView) this.findViewById(R.id.text_start_time);		this.text_start_date = (TextView) this.findViewById(R.id.text_start_date);		this.btn_start_time_add = (ImageButton) this.findViewById(R.id.btn_start_time_add);		this.text_end_time = (TextView) this.findViewById(R.id.text_end_time);		this.btn_end_time_add = (ImageButton) this.findViewById(R.id.btn_end_time_add);		this.btn_check = (ImageButton) this.findViewById(R.id.btn_check);				// 언어		this.total_title = (TextView) this.findViewById(R.id.total_title);		this.text_wait = (TextView) this.findViewById(R.id.text_wait);	}	@Override	public void modifyXmlResources() {		LayoutParams param;        param = new LayoutParams(LayoutParams.MATCH_PARENT,StaticData.device_Height/10);        this.layout_header.setLayoutParams(param);                // 언어 설정에 다른 화면 구성		switch (StaticData.NOWLANGUAGE) {		case StaticData.KOREA:			this.btn_back.setImageResource(R.drawable.b_back_kr);			this.btn_check.setImageResource(R.drawable.b_save_kr);			this.total_title.setText(R.string.schedule_ko);			this.text_wait.setText(R.string.wait_ko);						this.text_start_date.setHint(R.string.schedule_time_ko);			this.text_start_time.setHint(R.string.time_ko);			this.text_end_time.setHint(R.string.time_ko);			this.btn_start_time_add.setImageResource(R.drawable.b_selecttime_kr);			this.btn_end_time_add.setImageResource(R.drawable.b_selecttime_kr);			break;		case StaticData.ENGLISH:			this.btn_back.setImageResource(R.drawable.b_back_en);			this.btn_check.setImageResource(R.drawable.b_save_en);			this.total_title.setText(R.string.schedule_en);			this.text_start_date.setHint(R.string.schedule_time_en);			this.text_start_time.setHint(R.string.time_en);			this.text_end_time.setHint(R.string.time_en);			this.btn_start_time_add.setImageResource(R.drawable.b_selecttime_en);			this.btn_end_time_add.setImageResource(R.drawable.b_selecttime_en);			this.text_wait.setText(R.string.wait_en);			break;		case StaticData.CHINA:			this.btn_back.setImageResource(R.drawable.b_back_cn);			this.btn_check.setImageResource(R.drawable.b_save_cn);			this.total_title.setText(R.string.schedule_cn);			this.text_start_date.setHint(R.string.schedule_time_cn);			this.text_start_time.setHint(R.string.time_cn);			this.text_end_time.setHint(R.string.time_cn);			this.btn_start_time_add.setImageResource(R.drawable.b_selecttime_cn);			this.btn_end_time_add.setImageResource(R.drawable.b_selecttime_cn);			this.text_wait.setText(R.string.wait_cn);			break;		}	}		public final static int START_DIALOG = 0;	public final static int END_DIALOG = 1;	@Override	protected Dialog onCreateDialog(int id) {		switch(id){		case END_DIALOG:			return new mTimepickerDialog(this, eTimeSetListener, eHour, eMin, false) ;		}		return null;	}		class mTimepickerDialog extends TimePickerDialog{		public mTimepickerDialog(Context context, OnTimeSetListener callBack,				int hourOfDay, int minute, boolean is24HourView) {			super(context, callBack, hourOfDay, minute, is24HourView);		}				@Override		public void onTimeChanged(TimePicker view, int hourOfDay, int minute) {			if(hourOfDay < StartH) {				view.setCurrentHour(StartH);			}						if(minute < StartM) {				view.setCurrentMinute(StartM);			}//			super.onTimeChanged(view, hourOfDay, minute);		}	}	@Override	public void setEventListener() {		this.btn_back.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				Intent intent = new Intent(getApplicationContext(), MyBriefcaseScheduleDetail_Activity.class);				intent.putExtra("schedule_id", schedule_id);				startActivity(intent);				finish();			}		});		this.btn_start_time_add.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				showDateTimeDialog();			}		});		this.btn_end_time_add.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				if(text_start_time.getText().toString().equals("")){					switch (StaticData.NOWLANGUAGE) {					case StaticData.KOREA:					Toast.makeText(getApplicationContext(),					R.string.please_select_the_time_ko, Toast.LENGTH_SHORT).show();					break;					case StaticData.ENGLISH:					Toast.makeText(getApplicationContext(),					R.string.please_select_the_time_en, Toast.LENGTH_SHORT).show();					break;					case StaticData.CHINA:					Toast.makeText(getApplicationContext(),					R.string.please_select_the_time_cn, Toast.LENGTH_SHORT).show();					break;					}				}else{					showDialog(END_DIALOG);				}			}		});		this.btn_check.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				if(edit_title.getText().toString().equals("")){					switch (StaticData.NOWLANGUAGE) {					case StaticData.KOREA:						Toast.makeText(getApplicationContext(), R.string.please_enter_the_title_ko,	 Toast.LENGTH_SHORT).show();						break;					case StaticData.ENGLISH:						Toast.makeText(getApplicationContext(), R.string.please_enter_the_title_en,	 Toast.LENGTH_SHORT).show();						break;					case StaticData.CHINA:						Toast.makeText(getApplicationContext(), R.string.please_enter_the_title_cn,	 Toast.LENGTH_SHORT).show();						break;					}				}else if(edit_contents.getText().toString().equals("")){					switch (StaticData.NOWLANGUAGE) {					case StaticData.KOREA:						Toast.makeText(getApplicationContext(), R.string.please_enter_the_contents_ko,	 Toast.LENGTH_SHORT).show();						break;					case StaticData.ENGLISH:						Toast.makeText(getApplicationContext(), R.string.please_enter_the_contents_en,	 Toast.LENGTH_SHORT).show();						break;					case StaticData.CHINA:						Toast.makeText(getApplicationContext(), R.string.please_enter_the_contents_en,	 Toast.LENGTH_SHORT).show();						break;								}				}else if(conference_date.equals("")						|| startTimeTotal.equals("")						|| text_end_time.getText().toString().equals("")){					switch (StaticData.NOWLANGUAGE) {					case StaticData.KOREA:						Toast.makeText(getApplicationContext(), R.string.please_enter_the_times_ko,	 Toast.LENGTH_SHORT).show();						break;					case StaticData.ENGLISH:						Toast.makeText(getApplicationContext(), R.string.please_enter_the_times_en,	 Toast.LENGTH_SHORT).show();						break;					case StaticData.CHINA:						Toast.makeText(getApplicationContext(), R.string.please_enter_the_times_cn,	 Toast.LENGTH_SHORT).show();						break;					}										}else{					new setScheduleAdd(MyBriefcaseScheduleModify_Activity.this).execute();				}			}		});	}		// dialog	// end time	public int eHour,eMin;	public String eAMPM;	private TimePickerDialog.OnTimeSetListener eTimeSetListener = new TimePickerDialog.OnTimeSetListener() {		@Override		public void onTimeSet(TimePicker view, int hourOfDay, int minute) {			// TODO Auto-generated method stub			eHour = hourOfDay;			eMin = minute;			updateEDisplay();		}	};	// 시작날짜 텍스트 부분 설정 	private void updateEDisplay() {		int temp = eHour;		if(eHour > 12){			eAMPM = "PM";			temp -= 12;		}else{			eAMPM = "AM";		}		text_end_time.setText(new StringBuilder().append(temp).append(":").append(pad(eMin)).append(" "+eAMPM));	    Log.e("", "eHour : "+eHour+", eMin : "+eMin);	}	private static String pad(int c) {	    // TODO Auto-generated method stub	    if(c >= 10){	        return String.valueOf(c);	    }else	        return "0" + String.valueOf(c);	}		public Dialog mDateTimeDialog;		public int StartH,StartM;	public String startTimeTotal = "";	public String conference_date;	private void showDateTimeDialog() {		layout_progressbar.setVisibility(LinearLayout.VISIBLE);		// Create the dialog		mDateTimeDialog = new Dialog(this);		// Inflate the root layout		final RelativeLayout mDateTimeDialogView = (RelativeLayout) getLayoutInflater().inflate(R.layout.date_time_dialog, null);		// Grab widget instance		final DateTimePicker mDateTimePicker = (DateTimePicker) mDateTimeDialogView.findViewById(R.id.DateTimePicker);		// Check is system is set to use 24h time (this doesn't seem to work as expected though)		final String timeS = android.provider.Settings.System.getString(getContentResolver(), android.provider.Settings.System.TIME_12_24);		final boolean is24h = !(timeS == null || timeS.equals("12"));				// --------------------------------------------		Button setDateTime = (Button) mDateTimeDialogView.findViewById(R.id.SetDateTime);		Button CancelDialog = (Button) mDateTimeDialogView.findViewById(R.id.CancelDialog);		Button ResetDateTime = (Button) mDateTimeDialogView.findViewById(R.id.ResetDateTime);				switch (StaticData.NOWLANGUAGE) {		case StaticData.KOREA:			setDateTime.setText(R.string.confirm_ko);			CancelDialog.setText(R.string.cancel_ko);//							ResetDateTime.setText(R.string.confirm_ko);			break;		case StaticData.ENGLISH:			setDateTime.setText(R.string.confirm_en);			CancelDialog.setText(R.string.cancel_en);//							ResetDateTime.setText(R.string.confirm_ko);			break;		case StaticData.CHINA:			setDateTime.setText(R.string.confirm_cn);			CancelDialog.setText(R.string.cancel_cn);//							ResetDateTime.setText(R.string.confirm_ko);			break;		}		// --------------------------------------------				// Update demo TextViews when the "OK" button is clicked 		setDateTime.setOnClickListener(new OnClickListener() {			public void onClick(View v) {				mDateTimePicker.clearFocus();				// TODO Auto-generated method stub				date = "";				date = mDateTimePicker.get(Calendar.YEAR) + "-" + (mDateTimePicker.get(Calendar.MONTH)+1) + "-"						+ mDateTimePicker.get(Calendar.DAY_OF_MONTH);				String tempTime="";				startTimeTotal = "";				if(mDateTimePicker.get(Calendar.MINUTE) <10){					tempTime = "0"+mDateTimePicker.get(Calendar.MINUTE);					startTimeTotal = "0"+mDateTimePicker.get(Calendar.HOUR_OF_DAY)+tempTime;				}else{					tempTime = mDateTimePicker.get(Calendar.MINUTE)+"";					startTimeTotal = "0"+mDateTimePicker.get(Calendar.HOUR_OF_DAY)+tempTime;				}				start_hour = "";				start_hour = mDateTimePicker.get(Calendar.HOUR_OF_DAY) + tempTime+"";				conference_date = "";				conference_date = mDateTimePicker.get(Calendar.YEAR) + "-" + (mDateTimePicker.get(Calendar.MONTH)+1) + "-"						+ mDateTimePicker.get(Calendar.DAY_OF_MONTH);				text_start_date.setText(mDateTimePicker.get(Calendar.YEAR) + "/" + (mDateTimePicker.get(Calendar.MONTH)+1) + "/"						+ mDateTimePicker.get(Calendar.DAY_OF_MONTH));				if (mDateTimePicker.is24HourView()) {					text_start_time.setText(mDateTimePicker.get(Calendar.HOUR_OF_DAY) + ":" + tempTime);				} else {					text_start_time.setText(mDateTimePicker.get(Calendar.HOUR) + ":" + tempTime + " "							+ (mDateTimePicker.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM"));				}				StartH = mDateTimePicker.get(Calendar.HOUR_OF_DAY);				StartM = mDateTimePicker.get(Calendar.MINUTE);				mDateTimeDialog.dismiss();			}		});		// Cancel the dialog when the "Cancel" button is clicked		CancelDialog.setOnClickListener(new OnClickListener() {			public void onClick(View v) {				mDateTimeDialog.cancel();			}		});		// Reset Date and Time pickers when the "Reset" button is clicked		ResetDateTime.setOnClickListener(new OnClickListener() {			public void onClick(View v) {				mDateTimePicker.reset();			}		});				// Setup TimePicker		mDateTimePicker.setIs24HourView(is24h);		// No title on the dialog window		mDateTimeDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);		// Set the dialog content view		mDateTimeDialog.setContentView(mDateTimeDialogView);		// Display the dialog		mDateTimeDialog.show();		layout_progressbar.setVisibility(LinearLayout.GONE);	}	public void UpdateUI(){		this.conference_date = dto.CONFERENCE_DATE;		this.startTimeTotal = dto.START_TIME;		this.endTime = dto.END_TIME;				this.edit_title.setText(dto.TITLE);		this.edit_contents.setText(dto.CONTENTS);				StringBuffer temp = new StringBuffer();		int c =0;		String amPm = "";		c = Integer.parseInt(startTimeTotal.substring(0, 2));		if(c > 12){			amPm = "PM";			c -= 12;		}else{			amPm = "AM";		}		temp.append(c).append(":").append(startTimeTotal.substring(2,4)).append(" "+amPm);		this.text_start_time.setText(temp);						temp = new StringBuffer();		amPm = "";		c = Integer.parseInt(endTime.substring(0, 2));		if(c > 12){			amPm = "PM";			c -= 12;		}else{			amPm = "AM";		}		temp.append(c).append(":").append(endTime.substring(2,4)).append(" "+amPm);		this.text_end_time.setText(temp);		this.text_start_date.setText(dto.CONFERENCE_DATE);	}		String endTime;		// back ground	// get schedule info	class setScheduleInfo extends WeakAsyncTask<Void, Void, Void, Activity>{		boolean result = false;		public setScheduleInfo(Activity target) {			super(target);		}		@Override		protected void onPreExecute(Activity target) {			layout_progressbar.setVisibility(LinearLayout.VISIBLE);		}		@Override		protected Void doInBackground(Activity target, Void... params) {			MybriefDAO dao = new MybriefDAO(MyBriefcaseScheduleModify_Activity.this);			try {				result = dao.setScheduleInfo(schedule_id);			} catch (Exception e) {				result = false;			}			if(result){				if(dto != null){					dto = new ScheduleContentsDto();				}				dto = dao.getScheduleInfo();			}			return null;		}				@Override		protected void onPostExecute(Activity target, Void result) {			if(this.result){				UpdateUI();			}			layout_progressbar.setVisibility(LinearLayout.GONE);			setEventListener();		}	}	// schedule add area	class setScheduleAdd extends WeakAsyncTask<Void, Void, Void,Activity>{		public setScheduleAdd(Activity target) {			super(target);		}		boolean result;		String endTime;		@Override		protected void onPreExecute(Activity target) {			layout_progressbar.setVisibility(LinearLayout.VISIBLE);			endTime = pad(eHour)+pad(eMin);		}				@Override		protected Void doInBackground(Activity target,Void... params) {			MybriefDAO dao = new MybriefDAO(MyBriefcaseScheduleModify_Activity.this);			try {				result = dao.executeScheduleUpdate(						schedule_id,						conference_date,						startTimeTotal,endTime,						edit_contents.getText().toString(),						edit_title.getText().toString());			} catch (Exception e) {				result = false;			}			return null;		}				@Override		protected void onPostExecute(Activity target,Void result) {			if(this.result){				switch (StaticData.NOWLANGUAGE) {				case StaticData.KOREA:				Toast.makeText(getApplicationContext(),				R.string.success_ko, Toast.LENGTH_SHORT).show();				break;				case StaticData.ENGLISH:				Toast.makeText(getApplicationContext(),				R.string.success_en, Toast.LENGTH_SHORT).show();				break;				case StaticData.CHINA:				Toast.makeText(getApplicationContext(),				R.string.success_cn, Toast.LENGTH_SHORT).show();				break;				}				Intent intent = new Intent(getApplicationContext(), MyBriefcaseSchedule_Activity.class);				startActivity(intent);				finish();			}else{				switch (StaticData.NOWLANGUAGE) {				case StaticData.KOREA:				Toast.makeText(getApplicationContext(),				R.string.please_retry_ko, Toast.LENGTH_SHORT).show();				break;				case StaticData.ENGLISH:				Toast.makeText(getApplicationContext(),				R.string.please_retry_en, Toast.LENGTH_SHORT).show();				break;				case StaticData.CHINA:				Toast.makeText(getApplicationContext(),				R.string.please_retry_cn, Toast.LENGTH_SHORT).show();				break;				}			}			layout_progressbar.setVisibility(LinearLayout.GONE);		}	}}